var Promise = require('bluebird') // Promise library
    , fs = require("promised-io/fs"); // Promises around fs calls
;

exports.fileStatus = function (filePath) {
    // Return a promise right away
    return new Promise(function (fulfill, reject) {

        return fs.stat(filePath)
            .then(function (stat) {
                    if (stat.isDirectory()) {
                        fulfill('directory');
                    }
                    fulfill('file');
                }, function (error) {  // Handle errors here
                    // If the error code is ENOENT that means the path does not exist.
                    // That really isn't an error so we call the fulfillment method with boolean false
                    if (error.code === 'ENOENT') {
                        return fulfill(false);
                    }
                    // Other errors are really treated as errors
                    reject(error);
                });
    });
};

exports.loadJSON = function (filePath) {

    var configObj; // The object to return

    // Return a promise right away
    return new Promise(function (fulfill, reject) {

        return fs.readFile(filePath, 'utf8')
            .then(function (file) {
                try {
                    configObj = JSON.parse(file);
                } catch (err) {
                    // probably bad JSON
                    console.log(err);
                }

                fulfill(configObj);

            }, function (err) {
                reject(err);
            });
    });
};